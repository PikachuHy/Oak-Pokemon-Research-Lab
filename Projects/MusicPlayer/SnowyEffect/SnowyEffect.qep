{
    "QEP": {
        "QQEM": "0.43",
        "connections": [
            {
                "fromId": 2,
                "toId": 3
            },
            {
                "fromId": 3,
                "toId": 1
            },
            {
                "fromId": 0,
                "toId": 4
            },
            {
                "fromId": 4,
                "toId": 2
            }
        ],
        "exportDirectory": "export",
        "exportFlags": 11,
        "exportName": "SnowyEffect",
        "nodes": [
            {
                "fragmentCode": [
                    "void main() {",
                    "    @nodes",
                    "    fragColor = fragColor * qt_Opacity;",
                    "}"
                ],
                "name": "Main",
                "nodeId": 0,
                "type": 0,
                "vertexCode": [
                    "void main() {",
                    "    texCoord = qt_MultiTexCoord0;",
                    "    fragCoord = qt_Vertex.xy;",
                    "    vec2 vertCoord = qt_Vertex.xy;",
                    "    @nodes",
                    "    gl_Position = qt_Matrix * vec4(vertCoord, 0.0, 1.0);",
                    "}"
                ],
                "x": 215.04998779296875,
                "y": 45.20000076293945
            },
            {
                "name": "Output",
                "nodeId": 1,
                "type": 1,
                "x": 216.04998779296875,
                "y": 778.7999877929688
            },
            {
                "description": "Generates fog/clouds/smoke effect.",
                "fragmentCode": [
                    "@main",
                    "{",
                    "    float time = iTime * 0.5;",
                    "    float coordX = fract((fogMovement.x * time + texCoord.x) * fogTextureScale.x);",
                    "    float coordY = fract((fogMovement.y * time + texCoord.y) * fogTextureScale.y);",
                    "    vec2 fogCoord = vec2(coordX, coordY);",
                    "    vec4 fogTex = texture(fogTexture, fogCoord);",
                    "    float fog = 0.5 * dot(fogTex.rgb, fogAnimation.xyz);",
                    "    fragColor.rgb = mix(fragColor.rgb, fogColor.rgb * fragColor.a, fog * fogColor.a);",
                    "}"
                ],
                "name": "Fog",
                "nodeId": 2,
                "properties": [
                    {
                        "defaultValue": "../../../../../Qt/6.6.1/msvc2019_64/qml/QtQuickEffectMaker/defaultnodes/images/fog.png",
                        "description": "Texture for the fog effect. RGB layers are utilized as a separate fog sprites. This should support seamless tiling.",
                        "name": "fogTexture",
                        "type": "image",
                        "value": "../../../../../Qt/6.6.1/msvc2019_64/qml/QtQuickEffectMaker/defaultnodes/images/fog.png"
                    },
                    {
                        "defaultValue": "1, 1",
                        "description": "Scaling of the fog texture.",
                        "maxValue": "2, 2",
                        "minValue": "0.1, 0.1",
                        "name": "fogTextureScale",
                        "type": "vec2",
                        "value": "2, 2"
                    },
                    {
                        "defaultValue": "0, 0",
                        "description": "Defines how the fog moves on x and y coordinates while it animates. The default value is (0, 0) so not moving and practical range between (-1.0, -1.0) and (1.0, 1.0).",
                        "maxValue": "1, 1",
                        "minValue": "-1, -1",
                        "name": "fogMovement",
                        "type": "vec2",
                        "value": "-0.0147911, 0.04"
                    },
                    {
                        "defaultValue": "0.8, 0.8, 0.8, 1",
                        "description": "Defines the color of the fog. The default value is light gray (0.8, 0.8, 0.8, 1.0).",
                        "name": "fogColor",
                        "type": "color",
                        "value": "1, 1, 1, 1"
                    },
                    {
                        "defaultValue": "1",
                        "description": "Defines the speed how fast the fog frames are animated. The default value is 1.0.",
                        "maxValue": "5",
                        "minValue": "0",
                        "name": "fogAnimationSpeed",
                        "type": "float",
                        "value": "1.16298"
                    }
                ],
                "type": 2,
                "vertexCode": [
                    "@mesh 16, 16",
                    "out vec3 fogAnimation;",
                    "// 1/3 and 2/3 of TAU",
                    "#define TAU_13 2.09439510239",
                    "#define TAU_23 4.18879020478",
                    "@main",
                    "{",
                    "    float time = iTime * fogAnimationSpeed;",
                    "    const float fogBaseOpacity = 0.3;",
                    "    float fogOpacityAnimation = (1.0 - fogBaseOpacity);",
                    "    // Animate fog opacity based on texCoord & time",
                    "    fogOpacityAnimation += 0.8 * sin(texCoord.x * 12.0 + sin(time * 0.2)) * sin(texCoord.y * 7.0 + sin(time * 0.35));",
                    "    // Animate RGB layers of fog texture like a sprite",
                    "    vec3 fogLayersAnimation = vec3(sin(time), sin(time + TAU_13), sin(time + TAU_23));",
                    "    fogAnimation = vec3(fogBaseOpacity) + fogLayersAnimation * fogOpacityAnimation;",
                    "}"
                ],
                "x": 179.71664428710938,
                "y": 427
            },
            {
                "description": "Generates snowing effect.",
                "fragmentCode": [
                    "@main",
                    "{",
                    "    float snowing = 0.0;",
                    "    float time = iTime * 0.8;",
                    "    for (int i = 1; i < (1 + snowingLayers); i++) {",
                    "        // Divide layer into cells",
                    "        float cellAmount = 2.0 + (float(i) * 3.0);",
                    "        vec2 uv = vec2(texCoord.x, texCoord.y - time * snowingGravity * (1.0 / float(i)));",
                    "        vec2 uvStep = (ceil(uv * cellAmount - vec2(0.5, 0.5)) / cellAmount);",
                    "        float discardFlake = fract(sin(dot(uvStep.xy, vec2(32.4691, 94.615))) * 31572.1684);",
                    "        if (discardFlake < 0.3) {",
                    "            // Random positions inside the cell",
                    "            float x = fract(sin(dot(uvStep, vec2(12.9898, 78.233))) * 43758.5453) - 0.5;",
                    "            float y = fract(sin(dot(uvStep, vec2(62.2364, 94.674))) * 62159.8432) - 0.5;",
                    "            float maxMag = snowingVariation / (1.0 + snowingFlakeSize);",
                    "            float mag1 = maxMag / cellAmount * cos(time * 3.0);",
                    "            float mag2 = maxMag / cellAmount * sin(time * 3.0);",
                    "            float d = (2.0 / snowingFlakeSize) * distance((uvStep.xy + vec2(x , sin(y)) * mag1 + vec2(y, x) * mag2), uv);",
                    "            float snowd = (x + 1.0) * 0.5 * clamp((1.5 - d * (10.0 + (x * 5.0)) * cellAmount), 0.0, 1.0);",
                    "            snowing +=snowd;",
                    "        }",
                    "    }",
                    "    vec4 snowingColor = vec4(1.0, 1.0, 1.0, snowing);",
                    "    fragColor = mix(fragColor, snowingColor * fragColor.a, snowing);",
                    "}"
                ],
                "name": "Snowing",
                "nodeId": 3,
                "properties": [
                    {
                        "defaultValue": "4",
                        "description": "The amount of snow layers. Increasing the layers adds variation to the snowing effect, but also requires more processing power. The default value is 4 and practical range is between 1 and 10.",
                        "maxValue": "10",
                        "minValue": "1",
                        "name": "snowingLayers",
                        "type": "int",
                        "value": "6"
                    },
                    {
                        "defaultValue": "1",
                        "description": "Size of a single snowflake. The default value is 1.0 and practical range is between 0.2 and 2.0.",
                        "maxValue": "2",
                        "minValue": "0.2",
                        "name": "snowingFlakeSize",
                        "type": "float",
                        "value": "0.5"
                    },
                    {
                        "defaultValue": "1",
                        "description": "Defines gravity of the snowing effect so how fast the snowflakes fall down. The default value is 1.0 and practical range is between 0.2 and 2.0.",
                        "maxValue": "2",
                        "minValue": "0.2",
                        "name": "snowingGravity",
                        "type": "float",
                        "value": "0.8"
                    },
                    {
                        "defaultValue": "0.5",
                        "description": "Defines how much snowflakes positions vary while they are coming down. The default value is 0.5 and the range is between 0.0 and 1.0.",
                        "maxValue": "1",
                        "minValue": "0",
                        "name": "snowingVariation",
                        "type": "float",
                        "value": "1"
                    }
                ],
                "type": 2,
                "x": 181.71665954589844,
                "y": 617.8999633789062
            },
            {
                "fragmentCode": [
                    "{",
                    "    float t = iTime * 0.5;",
                    "    vec3 c1 = vec3(0.4 - 0.4*sin(t), 0.9, 0.8);",
                    "    vec3 c2 = vec3(0.6, 0.2, 0.4 + 0.4*sin(t));",
                    "    fragColor = vec4(mix(c1, c2, 0.5 * (texCoord.x + texCoord.y)), 1.0);",
                    "}",
                    ""
                ],
                "name": "GradientBackground",
                "nodeId": 4,
                "type": 2,
                "x": 179.71665954589844,
                "y": 237.43331909179688
            }
        ],
        "version": 1
    }
}
